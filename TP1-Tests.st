TestCase subclass: #LlamadaInternacionalTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!LlamadaInternacionalTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/25/2022 17:20'!test8LlamadaInternacionalDeJusto29MinutosNoSeLeAplicaDescuento	| unaLlamadaInternacional costoEsperado|	"Arrange"	costoEsperado := 5.8.	unaLlamadaInternacional := LlamadaInternacional llamarConDuracion: 29 EnElHorario: 8 Hacia: 'Uruguay'.	unaLlamadaInternacional establecerTarifa: 0.2.		"Act and Assert"	self assert: (unaLlamadaInternacional calcularCosto) closeTo: costoEsperado.! !!LlamadaInternacionalTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/26/2022 03:12'!test2LlamadaInternacionalConCostoYHorarioCeroTieneCostoTotalCero	| unaLlamadaInternacional unaDuracion unHorario|	"Arrange"	unaDuracion := 0.	unHorario := 0.	unaLlamadaInternacional := LlamadaInternacional llamarConDuracion: unaDuracion EnElHorario: unHorario Hacia: 'Uruguay'.		"Act and Assert"	self assert: (unaLlamadaInternacional calcularCosto) equals: 0.! !!LlamadaInternacionalTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/25/2022 17:12'!test4LlamadaInternacionacionalConOtraTarifaSeFacturaCorrectamente	| unaLlamadaInternacional costoEsperado|	"Arrange"	costoEsperado := 30.	unaLlamadaInternacional := LlamadaInternacional llamarConDuracion: 10 EnElHorario: 19 Hacia: 'Uruguay'.	unaLlamadaInternacional establecerTarifa: 3.		"Act and Assert"	self assert: (unaLlamadaInternacional calcularCosto) equals: costoEsperado.! !!LlamadaInternacionalTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/25/2022 17:19'!test7LlamadaInternacionalDeJusto30MinutosSeLeAplicaDescuento	| unaLlamadaInternacional costoEsperado|	"Arrange"	costoEsperado := 5.4.	unaLlamadaInternacional := LlamadaInternacional llamarConDuracion: 30 EnElHorario: 8 Hacia: 'Uruguay'.	unaLlamadaInternacional establecerTarifa: 0.2.		"Act and Assert"	self assert: (unaLlamadaInternacional calcularCosto) equals: costoEsperado.! !!LlamadaInternacionalTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/25/2022 17:19'!test6LlamadaInternacionalDeMasDe30MinutosSeLeAplicaDescuento	| unaLlamadaInternacional costoEsperado|	"Arrange"	costoEsperado := 7.2.	unaLlamadaInternacional := LlamadaInternacional llamarConDuracion: 40 EnElHorario: 8 Hacia: 'Uruguay'.	unaLlamadaInternacional establecerTarifa: 0.2.		"Act and Assert"	self assert: (unaLlamadaInternacional calcularCosto) equals: costoEsperado.! !!LlamadaInternacionalTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/25/2022 16:51'!test1LlamadaInternacionalSinCostoNiHorarioTieneCostoTotalCero	| unaLlamadaInternacional |	"Arrange"	unaLlamadaInternacional := LlamadaInternacional new.		"Act and Assert"	self assert: (unaLlamadaInternacional calcularCosto) equals: 0.! !!LlamadaInternacionalTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/25/2022 17:16'!test5LlamadaInternacionacionalTieneMismoCostoEnHoraHabilQueNoHabil	| unaLlamadaInternacionalHabil unaLlamadaInternacionalNoHabil costoHabil costoNoHabil|	"Arrange"	unaLlamadaInternacionalHabil := LlamadaInternacional llamarConDuracion: 10 EnElHorario: 19 Hacia: 'Uruguay'.	unaLlamadaInternacionalNoHabil := LlamadaInternacional llamarConDuracion: 10 EnElHorario: 23 Hacia: 'Uruguay'.	unaLlamadaInternacionalHabil establecerTarifa: 3.	unaLlamadaInternacionalNoHabil establecerTarifa: 3.	costoHabil := unaLlamadaInternacionalHabil calcularCosto.	costoNoHabil := unaLlamadaInternacionalNoHabil calcularCosto.		"Act and Assert"	self assert: (costoHabil) equals: costoNoHabil.! !!LlamadaInternacionalTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/25/2022 17:12'!test3LlamadaInternacionacionalConTarifaSeFacturaCorrectamente	| unaLlamadaInternacional costoEsperado|	"Arrange"	costoEsperado := 2.	unaLlamadaInternacional := LlamadaInternacional llamarConDuracion: 10 EnElHorario: 19 Hacia: 'Uruguay'.	unaLlamadaInternacional establecerTarifa: 0.2.		"Act and Assert"	self assert: (unaLlamadaInternacional calcularCosto) equals: costoEsperado.! !TestCase subclass: #LlamadaNacionalTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!LlamadaNacionalTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/26/2022 01:49'!test3LlamadaNacionalEnHorarioHabilSeFacturaCorrectamente	| unaLlamadaNacional costoEsperado|	"Arrange"	costoEsperado := 2.	unaLlamadaNacional := LlamadaNacional llamarConDuracion: 10 EnElHorario: 8.		"Act and Assert"	self assert: (unaLlamadaNacional calcularCosto) equals: costoEsperado.	! !!LlamadaNacionalTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/25/2022 17:04'!test7LlamadaNacionalDeMasDe30MinutosSeLeAplicaDescuento	| unaLlamadaNacional costoEsperado|	"Arrange"	costoEsperado := 7.2.	unaLlamadaNacional := LlamadaNacional llamarConDuracion: 40 EnElHorario: 8.		"Act and Assert"	self assert: (unaLlamadaNacional calcularCosto) equals: costoEsperado.	! !!LlamadaNacionalTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/25/2022 16:51'!test2LlamadaNacionalConCostoYHorarioCeroTieneCostoTotalCero	| unaLlamadaNacional unaDuracion unHorario|	"Arrange"	unaDuracion := 0.	unHorario := 0.	unaLlamadaNacional := LlamadaNacional llamarConDuracion: unaDuracion EnElHorario: unHorario.		"Act and Assert"	self assert: (unaLlamadaNacional calcularCosto) equals: 0.! !!LlamadaNacionalTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/25/2022 16:51'!test1LlamadaNacionalSinCostoNiHorarioTieneCostoTotalCero	| unaLlamadaNacional |	"Arrange"	unaLlamadaNacional := LlamadaNacional new.		"Act and Assert"	self assert: (unaLlamadaNacional calcularCosto) equals: 0.! !!LlamadaNacionalTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/25/2022 17:01'!test5LlamadaNacionalEnHorarioNoHabilSeFacturaCorrectamente	| unaLlamadaNacional costoEsperado|	"Arrange"	costoEsperado := 1.	unaLlamadaNacional := LlamadaNacional llamarConDuracion: 10 EnElHorario: 7.		"Act and Assert"	self assert: (unaLlamadaNacional calcularCosto) equals: costoEsperado.! !!LlamadaNacionalTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/26/2022 01:48'!test6LlamadaNacionalEnHorarioNoHabilLimiteSeFacturaCorrectamente	| unaLlamadaNacional costoEsperado|	"Arrange"	costoEsperado := 2.	unaLlamadaNacional := LlamadaNacional llamarConDuracion: 20 EnElHorario: 20.		"Act and Assert"	self assert: (unaLlamadaNacional calcularCosto) equals: costoEsperado.	! !!LlamadaNacionalTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/26/2022 01:49'!test4LlamadaNacionalEnHorarioHabilLimiteSeFacturaCorrectamente	| unaLlamadaNacional costoEsperado|	"Arrange"	costoEsperado := 4.	unaLlamadaNacional := LlamadaNacional llamarConDuracion: 20 EnElHorario: 19.		"Act and Assert"	self assert: (unaLlamadaNacional calcularCosto) equals: costoEsperado.	! !!LlamadaNacionalTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/25/2022 17:07'!test9LlamadaNacionalDeJusto29MinutosNoSeLeAplicaDescuento	| unaLlamadaNacional costoEsperado|	"Arrange"	costoEsperado := 5.8.	unaLlamadaNacional := LlamadaNacional llamarConDuracion: 29 EnElHorario: 8.		"Act and Assert"	self assert: (unaLlamadaNacional calcularCosto) closeTo: costoEsperado.	! !!LlamadaNacionalTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/25/2022 17:05'!test8LlamadaNacionalDeJusto30MinutosSeLeAplicaDescuento	| unaLlamadaNacional costoEsperado|	"Arrange"	costoEsperado := 5.4.	unaLlamadaNacional := LlamadaNacional llamarConDuracion: 30 EnElHorario: 8.		"Act and Assert"	self assert: (unaLlamadaNacional calcularCosto) equals: costoEsperado.	! !TestCase subclass: #RegistroLlamadasTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!RegistroLlamadasTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/25/2022 17:53'!test2UnRegistroDeLlamadasConUnaLlamadaDevuelveEsaLlamadaComoLaMasCostosa	| unRegistroLlamadas unaLlamada |	"Arrange"	unaLlamada := LlamadaInternacional llamarConDuracion: 10 EnElHorario: 19 Hacia: 'Uruguay'.	unaLlamada establecerTarifa: 3.	unRegistroLlamadas := RegistroLlamadas new.	unRegistroLlamadas agregarLlamada: unaLlamada.		"Act and Assert"	self assert: (unRegistroLlamadas obtenerLlamadaMasCostosa) 	equals: 'La llamada mas costosa: La llamada se hizo a Uruguay a las 19 hs durando 10 minutos'! !!RegistroLlamadasTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/26/2022 01:30'!test1UnRegistroDeLlamadasNuevoEstaVacioYLoNotifica	| unRegistroLlamadas llamadaMasCostosa |	"Arrange"	llamadaMasCostosa := 'No hay ninguna llamada en el registro de llamadas'.	unRegistroLlamadas := RegistroLlamadas new.		"Act and Assert"	self assert: (unRegistroLlamadas obtenerLlamadaMasCostosa) equals: llamadaMasCostosa.! !!RegistroLlamadasTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/25/2022 17:43'!test3UnRegistroDeLlamadasConAlgunasLlamadasDevuelveUnaDescripcionDeLaMasCostosa	| unRegistroLlamadas unaLlamada1 unaLlamada2 unaLlamada3 |	"Arrange"	unaLlamada1 := LlamadaInternacional llamarConDuracion: 10 EnElHorario: 19 Hacia: 'Uruguay'.	unaLlamada1 establecerTarifa: 3.	unaLlamada2 := LlamadaNacional llamarConDuracion: 2000 EnElHorario: 9.	unaLlamada3 := LlamadaNacional llamarConDuracion: 20 EnElHorario: 6.	unRegistroLlamadas := RegistroLlamadas new.	unRegistroLlamadas agregarLlamada: unaLlamada3.	unRegistroLlamadas agregarLlamada: unaLlamada1.	unRegistroLlamadas agregarLlamada: unaLlamada2.		"Act and Assert"	self assert: (unRegistroLlamadas obtenerLlamadaMasCostosa) 	equals: 'La llamada mas costosa: La llamada se hizo a Argentina a las 9 hs durando 2000 minutos'! !TestCase subclass: #TeleAlgoTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!TeleAlgoTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/26/2022 02:25'!test16SeAplicaAbonoMensualInvalidoYSaltaExcepcion	| abonoMensual |	"Arrange"	abonoMensual := -100.	"teleAlgo := TeleAlgo conAbonoMensual: abonoMensual."	"Act and Assert"	self should: [TeleAlgo conAbonoMensual: abonoMensual] raise: AbonoMensualInvalido description: 'El abono mensual debe ser mayor o igual a 0'.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AgustinRodriguez 4/3/2022 19:43'!test6SeRegistranAlgunasLlamadasYSeBuscaLaLlamadaMasCostosaRealizadaYDevuelveUnaDescripcionDeLaMisma	| teleAlgo abonoMensual |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 22.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	teleAlgo registrarLlamadaInternacionalCon: 20 HechaEnElHorario: 24 Hacia: 'Paraguay'.	self		assert: ( teleAlgo consultarPorLlamadaEfectuadaMasCostosa )		equals:		'La llamada mas costosa: La llamada se hizo a Paraguay a las 24 hs durando 20 minutos'! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/26/2022 01:12'!test10SeRegistraUnaLlamadaInternacionalQueAlDurarMasDe30MinutosSeLeAplicaUnDescuentoDel10PorCiento	| teleAlgo abonoMensual montoEsperadoAPagar |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	montoEsperadoAPagar := 172.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 2.	teleAlgo registrarLlamadaInternacionalCon: 40 HechaEnElHorario: 24 Hacia: 'Uruguay'.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test1SeFacturanLasLlamadasDeUnUsuarioQueNoRealizoLlamadasDuranteElMesYPagaSoloElAbonoMensualFijo	| montoEsperadoAPagar teleAlgo abonoMensual |		"Arrange"	montoEsperadoAPagar := 100.	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test7SeRegistraUnaLlamadaQueAlDurarMasDe30MinutosSeLeAplicaUnDescuentoDel10PorCiento	| teleAlgo abonoMensual montoEsperadoAPagar |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	montoEsperadoAPagar := 103.6.	"Act and Assert"	teleAlgo registrarLlamadaNacionalConDuracion: 40 HechaEnElHorario: 24.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/26/2022 02:18'!test11SeRegistraUnaLlamadaNacionalConDuracionInvalidaYSaltaExcepcion	| teleAlgo abonoMensual |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	self should: [teleAlgo registrarLlamadaNacionalConDuracion: -10 HechaEnElHorario: 17] raise: DuracionInvalida description: 'La duracion debe ser mayor o igual a 0'.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/26/2022 02:20'!test14SeRegistraUnaLlamadaInternacionalConHorarioInvalidoYSaltaExcepcion	| teleAlgo abonoMensual |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	"Act and Assert"	self should: [teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 58 Hacia: 'Uruguay'] raise: HorarioInvalido description: 'El horario debe ser un numero natural que va desde la hora 1 a la hora 24'.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test2SeRegistraUnaLlamadaNacionalEnHoraHabilYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |	"Arrange"	montoEsperadoAPagar := 102. "El abono mas el costo de todas las llamadas"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	"El horario es un numero natural que va desde la hora 1 a la hora 24"	"Act and Assert"	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar	"El precio por min en horario habil es de 0,2 $"	"El horario habil es de 8 a 20"! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test5SeRegistraUnaLlamadaInternacionalYOtraNacionalEnHorarioHabilYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |	"Arrange"	abonoMensual := 100.	montoEsperadoAPagar := abonoMensual + 20 + 2.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 2.	teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 22 Hacia: 'Paraguay'.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test3SeRegistraUnaLlamadaNacionallYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |	"Arrange"	montoEsperadoAPagar := 101.	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 22.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar	"El precio por min en horario no habil es de 0,1 $"! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/24/2022 20:00'!test9CrearTeleAlgoSoloConAbonoMensualDevolveriaElCostoDelAbonoMensual	| unTeleAlgo costoEsperado|		"Arrange"	costoEsperado := 10.	unTeleAlgo := TeleAlgo conAbonoMensual: costoEsperado.		"Act and Assert"	self assert: (unTeleAlgo calcularGastoFinal) equals: costoEsperado.	! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/26/2022 02:19'!test12SeRegistraUnaLlamadaInternacionalConDuracionInvalidaYSaltaExcepcion	| teleAlgo abonoMensual |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	"Act and Assert"	self should: [teleAlgo registrarLlamadaInternacionalCon: -10 HechaEnElHorario: 17 Hacia: 'Uruguay'] raise: DuracionInvalida description: 'La duracion debe ser mayor o igual a 0'.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test4SeRegistraUnaLlamadaInternacionalYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |	"Arrange"	montoEsperadoAPagar := 110.	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 22 Hacia: 'Uruguay'.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/24/2022 20:00'!test8CrearTeleAlgoSinAbonoMensualDevolveriaUnCostoFinalCero	| unTeleAlgo costoEsperado|		"Arrange"	costoEsperado := 0.	unTeleAlgo := TeleAlgo new.		"Act and Assert"	self assert: (unTeleAlgo calcularGastoFinal) equals: costoEsperado.	! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/26/2022 02:22'!test15SeAplicaTarifaInternacionalInvalidaYSaltaExcepcion	| teleAlgo abonoMensual |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	self should: [teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: -2] raise: TarifaInvalida description: 'La tarifa debe ser mayor o igual a 0'.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AlejoFabregas 4/26/2022 02:19'!test13SeRegistraUnaLlamadaNacionalConHorarioInvalidoYSaltaExcepcion	| teleAlgo abonoMensual |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	self should: [teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 58] raise: HorarioInvalido description: 'El horario debe ser un numero natural que va desde la hora 1 a la hora 24'.! !